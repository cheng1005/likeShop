name: 部署微服务（修复工作区访问问题）
on:
  push:
    branches: [ main ]

jobs:
  deploy-microservices:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取最新代码
        uses: actions/checkout@v4

      # 显示项目目录结构和工作区信息
      - name: 查看环境和目录结构
        run: |
          echo "GitHub工作区路径: ${{ github.workspace }}"
          echo "当前目录: $(pwd)"
          echo "工作区文件列表："
          ls -la ${{ github.workspace }}
          echo "子目录列表："
          find ${{ github.workspace }} -maxdepth 3 -type d

      # 编译 api-gateway 服务
      - name: 编译 api-gateway 服务
        run: |
          API_DIR="${{ github.workspace }}/api-gateway/basic/cmd"
          echo "检查 API 服务目录: $API_DIR"
          if [ ! -d "$API_DIR" ]; then
            echo "错误: API 服务目录 $API_DIR 不存在"
            exit 1
          fi
          
          cd "$API_DIR"
          go mod tidy
          go build -o api-service main.go
          
          # 生成压缩包到工作区根目录
          zip -r "${{ github.workspace }}/api-deploy.zip" api-service
          
          # 验证压缩包是否生成
          if [ ! -f "${{ github.workspace }}/api-deploy.zip" ]; then
            echo "错误: API 压缩包未生成"
            exit 1
          fi
          echo "API 压缩包已生成: ${{ github.workspace }}/api-deploy.zip"

      # 编译 goods-server 服务
      - name: 编译 goods-server 服务
        run: |
          SERVER_DIR="${{ github.workspace }}/goods-server/basic/cmd"
          echo "检查 Server 服务目录: $SERVER_DIR"
          if [ ! -d "$SERVER_DIR" ]; then
            echo "错误: Server 服务目录 $SERVER_DIR 不存在"
            exit 1
          fi
          
          cd "$SERVER_DIR"
          go mod tidy
          go build -o server-service main.go
          
          # 生成压缩包到工作区根目录
          zip -r "${{ github.workspace }}/server-deploy.zip" server-service
          
          # 验证压缩包是否生成
          if [ ! -f "${{ github.workspace }}/server-deploy.zip" ]; then
            echo "错误: Server 压缩包未生成"
            exit 1
          fi
          echo "Server 压缩包已生成: ${{ github.workspace }}/server-deploy.zip"

      # 确认压缩包存在
      - name: 确认压缩包存在
        run: |
          echo "工作区根目录文件列表："
          ls -la ${{ github.workspace }}
          echo "API压缩包信息："
          ls -la ${{ github.workspace }}/api-deploy.zip || echo "API压缩包不存在"
          echo "Server压缩包信息："
          ls -la ${{ github.workspace }}/server-deploy.zip || echo "Server压缩包不存在"

      # 部署到服务器 - 使用SCP先传输文件，再执行部署脚本
      - name: 传输文件到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          source: "${{ github.workspace }}/api-deploy.zip,${{ github.workspace }}/server-deploy.zip,${{ github.workspace }}/dev.yaml"
          target: "/tmp"

      - name: 在服务器上部署服务
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            BASE_PATH="/opt/microservices"
            mkdir -p $BASE_PATH/{api,server,config}
            
            # 确认传输的文件
            echo "临时目录文件："
            ls -la /tmp
            
            # 部署配置文件
            if [ -f "/tmp/dev.yaml" ]; then
              cp /tmp/dev.yaml $BASE_PATH/config/
              chmod 644 $BASE_PATH/config/dev.yaml
            else
              echo "警告：配置文件 dev.yaml 未找到"
              # 如果配置文件不是必须的，可以注释掉下面的exit 1
              # exit 1
            fi
            
            # 部署 server 服务
            if [ -f "/tmp/server-deploy.zip" ]; then
              cd $BASE_PATH/server
              cp /tmp/server-deploy.zip .
              unzip -o server-deploy.zip
              chmod +x server-service
              pkill -f "server-service" || true
              sleep 2
              nohup ./server-service --config $BASE_PATH/config/dev.yaml > server.log 2>&1 &
            else
              echo "错误：server-deploy.zip 未找到"
              exit 1
            fi
            
            # 等待 server 启动
            for i in {1..15}; do
              if pgrep -f "server-service" > /dev/null && nc -z localhost 8081; then
                echo "server 服务已就绪"
                break
              fi
              sleep 2
            done
            
            # 部署 api 服务
            if [ -f "/tmp/api-deploy.zip" ]; then
              cd $BASE_PATH/api
              cp /tmp/api-deploy.zip .
              unzip -o api-deploy.zip
              chmod +x api-service
              pkill -f "api-service" || true
              sleep 2
              nohup ./api-service --config $BASE_PATH/config/dev.yaml > api.log 2>&1 &
            else
              echo "错误：api-deploy.zip 未找到"
              exit 1
            fi
            
            # 清理临时文件
            rm -f /tmp/api-deploy.zip /tmp/server-deploy.zip /tmp/dev.yaml
            
            # 验证服务
            sleep 3
            if pgrep -f "server-service" && pgrep -f "api-service"; then
              echo "所有服务启动成功"
            else
              cat $BASE_PATH/server/server.log
              cat $BASE_PATH/api/api.log
              exit 1
            fi
