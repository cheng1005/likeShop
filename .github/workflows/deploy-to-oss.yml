name: 部署微服务（api依赖server+主目录配置）
on:
  push:
    branches: [ main ]

jobs:
  deploy-microservices:
    runs-on: ubuntu-latest
    steps:
      # 1. 拉取代码
      - name: 拉取最新代码
        uses: actions/checkout@v4

      # 2. 编译 api 服务
      - name: 编译 api 服务
        run: |
          cd ./api
          go mod tidy
          go build -o api-service main.go
          # 只打包可执行文件（配置文件统一处理）
          zip -r ../api-deploy.zip api-service

      # 3. 编译 server 服务
      - name: 编译 server 服务
        run: |
          cd ./server
          go mod tidy
          go build -o server-service main.go
          # 只打包可执行文件
          zip -r ../server-deploy.zip server-service

      # 4. 部署到服务器并按顺序启动服务
      - name: 部署到服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            # 服务器部署根目录
            BASE_PATH="/opt/microservices"
            mkdir -p $BASE_PATH/{api,server,config}  # 新增config目录存放配置文件
            
            # --------------------------
            # 1. 部署共享配置文件（主目录的dev.yaml）
            # --------------------------
            cd $BASE_PATH/config
            # 从代码仓库主目录复制配置文件
            scp -P ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ github.workspace }}/dev.yaml $USER@$HOST:$BASE_PATH/config/
            chmod 644 dev.yaml  # 配置文件只读权限
            
            # --------------------------
            # 2. 部署并启动 server 服务（先启动）
            # --------------------------
            cd $BASE_PATH/server
            rm -f server-deploy.zip
            scp -P ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ github.workspace }}/server-deploy.zip $USER@$HOST:$BASE_PATH/server/
            unzip -o server-deploy.zip
            chmod +x server-service
            
            # 停止旧的 server 服务
            pkill -f "server-service" || true
            sleep 2
            
            # 启动 server 服务（指定配置文件路径）
            nohup ./server-service --config $BASE_PATH/config/dev.yaml > server.log 2>&1 &
            echo "server 服务启动中..."
            
            # 等待 server 服务完全启动（关键：确保api启动前server已就绪）
            for i in {1..15}; do
              if pgrep -f "server-service" > /dev/null && nc -z localhost 8081; then
                echo "server 服务已就绪"
                break
              fi
              echo "等待server启动...（第 $i 次尝试）"
              sleep 2
            done
            
            # --------------------------
            # 3. 部署并启动 api 服务（后启动）
            # --------------------------
            cd $BASE_PATH/api
            rm -f api-deploy.zip
            scp -P ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ github.workspace }}/api-deploy.zip $USER@$HOST:$BASE_PATH/api/
            unzip -o api-deploy.zip
            chmod +x api-service
            
            # 停止旧的 api 服务
            pkill -f "api-service" || true
            sleep 2
            
            # 启动 api 服务（指定配置文件路径）
            nohup ./api-service --config $BASE_PATH/config/dev.yaml > api.log 2>&1 &
            echo "api 服务启动中..."
            
            # 验证所有服务状态
            sleep 3
            if pgrep -f "server-service" && pgrep -f "api-service" && nc -z localhost 8080; then
              echo "所有微服务启动成功"
              echo "api服务地址: http://${{ secrets.SERVER_IP }}:8080"
              echo "server服务地址: http://${{ secrets.SERVER_IP }}:8081"
            else
              echo "服务启动失败，查看日志："
              cat $BASE_PATH/server/server.log
              cat $BASE_PATH/api/api.log
              exit 1
            fi
    
