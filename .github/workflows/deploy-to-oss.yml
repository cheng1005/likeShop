name: 简化部署微服务
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: 编译服务
        run: |
          # 编译 API Gateway
          echo "编译 API Gateway..."
          cd api-gateway/basic/cmd
          CGO_ENABLED=0 GOOS=linux go build -o api-service main.go
          mv api-service ../../../

          # 编译 Goods Server
          echo "编译 Goods Server..."
          cd ../../../goods-server/basic/cmd
          CGO_ENABLED=0 GOOS=linux go build -o server-service main.go
          mv server-service ../../../

          # 返回项目根目录
          cd ../../..

          # 检查并创建配置文件（严格控制缩进和分界符）
          if [ ! -f "dev.yaml" ]; then
            echo "dev.yaml不存在，创建默认配置文件..."
            cat > dev.yaml <<- EOF
              NacosConfig:
                NamespaceId: b6187bf1-feed-4661-b632-1750ab22b543
                IpAddr: 14.103.235.216
                Port: 8848
                DataId: xxfz
                Group: shop_nacos
            EOF
            # 去除配置文件多余缩进（保证 YAML 格式正确）
            sed -i 's/^  //' dev.yaml
          fi

          # 创建部署包（显式检查文件存在性）
          echo "创建部署包..."
          for file in api-service server-service dev.yaml; do
            if [ ! -f "$file" ]; then
              echo "错误：$file 不存在，无法打包"
              exit 1
            fi
          done
          tar -czf deploy.tar.gz api-service server-service dev.yaml
          ls -la deploy.tar.gz

      - name: 部署到服务器
        run: |
          # 初始化 SSH 环境
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          # 测试 SSH 连接
          echo "测试 SSH 连接..."
          ssh -o ConnectTimeout=30 -p ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH 连接成功'"

          # 传输部署包
          echo "传输部署包..."
          scp -o ConnectTimeout=30 -P ${{ secrets.SERVER_SSH_PORT || 22 }} deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/

          # 远程执行部署脚本（优化变量作用域和语法）
          echo "执行部署..."
          ssh -o ConnectTimeout=30 -p ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} bash -s << 'EOF'
            set -euo pipefail
            BASE_PATH="/opt/microservices"

            # 确保目录结构存在
            sudo mkdir -p "${BASE_PATH}/api" "${BASE_PATH}/server" "${BASE_PATH}/config"
            sudo chown -R "$USER":"$USER" "$BASE_PATH"

            # 解压部署包
            cd /tmp
            if [ ! -f "deploy.tar.gz" ]; then
              echo "错误：部署包不存在"
              exit 1
            fi
            tar -xzf deploy.tar.gz

            # 部署配置文件
            if [ -f "dev.yaml" ]; then
              cp dev.yaml "${BASE_PATH}/config/"
            else
              echo "创建默认配置..."
              cat > "${BASE_PATH}/config/dev.yaml" <<- YAML
                NacosConfig:
                  NamespaceId: b6187bf1-feed-4661-b632-1750ab22b543
                  IpAddr: 14.103.235.216
                  Port: 8848
                  DataId: xxfz
                  Group: shop_nacos
              YAML
              sed -i 's/^  //' "${BASE_PATH}/config/dev.yaml"
            fi

            # 停止旧服务（安全退出）
            pkill -f "server-service" || true
            pkill -f "api-service" || true
            sleep 3

            # 部署 Server 服务
            cp server-service "${BASE_PATH}/server/"
            chmod +x "${BASE_PATH}/server/server-service"
            cd "${BASE_PATH}/server"
            nohup ./server-service --config "${BASE_PATH}/config/dev.yaml" > server.log 2>&1 &
            sleep 5  # 延长启动等待时间

            # 部署 API 服务
            cp /tmp/api-service "${BASE_PATH}/api/"
            chmod +x "${BASE_PATH}/api/api-service"
            cd "${BASE_PATH}/api"
            nohup ./api-service --config "${BASE_PATH}/config/dev.yaml" > api.log 2>&1 &

            # 验证服务状态（更健壮的检查）
            sleep 3
            if pgrep -f "server-service" && pgrep -f "api-service"; then
              echo "✅ 所有服务部署成功！"
            else
              echo "❌ 服务启动失败"
              echo "Server 日志："
              tail -10 "${BASE_PATH}/server/server.log" || echo "无日志"
              echo "API 日志："
              tail -10 "${BASE_PATH}/api/api.log" || echo "无日志"
              exit 1
            fi

            # 清理临时文件
            rm -f /tmp/deploy.tar.gz /tmp/api-service /tmp/server-service /tmp/dev.yaml
          EOF
