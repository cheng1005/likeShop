name: 部署微服务（修正目录路径）
on:
  push:
    branches: [ main ]

jobs:
  deploy-microservices:
    runs-on: ubuntu-latest
    steps:
      - name: 拉取最新代码
        uses: actions/checkout@v4

      # 显示项目目录结构（用于调试路径问题）
      - name: 查看项目目录结构
        run: |
          echo "当前项目根目录文件列表："
          ls -la
          echo "子目录列表："
          find . -maxdepth 1 -type d

      # 编译 api 服务（请根据实际路径修改 ./api）
      - name: 编译 api 服务
        run: |
          # 关键：修改为实际的api服务目录路径
          # 例如：如果api在services/api目录，改为 cd ./services/api
          cd ./api-service  # 替换为你的实际api目录名称
          
          go mod tidy
          go build -o api-service main.go
          zip -r ../api-deploy.zip api-service

      # 编译 server 服务（请根据实际路径修改 ./server）
      - name: 编译 server 服务
        run: |
          # 关键：修改为实际的server服务目录路径
          cd ./server-service  # 替换为你的实际server目录名称
          
          go mod tidy
          go build -o server-service main.go
          zip -r ../server-deploy.zip server-service

      # 部署步骤保持不变（使用修正后的压缩包）
      - name: 部署到服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT || 22 }}
          script: |
            BASE_PATH="/opt/microservices"
            mkdir -p $BASE_PATH/{api,server,config}
            
            # 部署配置文件
            cd $BASE_PATH/config
            scp -P ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ github.workspace }}/dev.yaml $USER@$HOST:$BASE_PATH/config/
            chmod 644 dev.yaml
            
            # 部署server服务
            cd $BASE_PATH/server
            scp -P ${{ secrets.SERVER_SSH_PORT || 22 }} ${{ github.workspace }}/server-deploy.zip $USER@$HOST:$BASE_PATH/server/
            unzip -o server-deploy.zip
            chmod +x server-service
            pkill -f "server-service" || true
            sleep 2
            nohup ./server-service --config $BASE_PATH/config/dev.yaml > server.log 2>&1 &
            
            # 等待server启动
            for i in {1..15}; do
              if pgrep -f "server-service" > /dev/null && nc -z localhost 8081; then
                echo "server 服务已就绪"
                break
              fi
              sleep 2
            done
            
            # 编译 api 服务（修正目录路径）
      - name: 编译 api 服务
        run: |
          # 关键：替换为你的实际项目中实际的 api 服务目录
          cd ./api-gateway  # 例如：如果目录是api，则改为 cd ./api
          
          go mod tidy
          go build -o api-service main.go
          zip -r ../api-deploy.zip api-service
            
            # 验证服务
            sleep 3
            if pgrep -f "server-service" && pgrep -f "api-service"; then
              echo "所有服务启动成功"
            else
              cat $BASE_PATH/server/server.log
              cat $BASE_PATH/api/api.log
              exit 1
            fi
    
